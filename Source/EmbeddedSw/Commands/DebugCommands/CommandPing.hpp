/*******************************************************************
@copyright COPYRIGHT AND PROPRIETARY RIGHTS NOTICES:

Copyright (C) 2021, an unpublished work by Syncroness, Inc.
All rights reserved.

This material contains the valuable properties and trade secrets of
Syncroness of Westminster, CO, United States of America
embodying substantial creative efforts and confidential information,
ideas and expressions, no part of which may be reproduced or
transmitted in any form or by any means, electronic, mechanical, or
otherwise, including photocopying and recording or in connection
with any information storage or retrieval system, without the prior
written permission of Syncroness.
****************************************************************** */
/* Header guard */
#ifndef __CEF_COMMAND_PING_H
#define __CEF_COMMAND_PING_H


/**
 * Interface definition for Ping Command
 *
 * The Ping command serves several purposes
 *  - It serves the traditional role of a network ping (thereby establishing connection/proving communication works)
 *  - Tests that data can be passed back and forth between Python Utilities and CEF SW
 *  - Tests for endianness issues between python and embedded software.
 *  	Different sized variables are passed to test for alignment/endianness
 *  - Often is used as a temporary debug command during debug (hence the ability to pass/return test parameters
 */

#include "CommandBase.hpp"

class CommandPing : public CommandBase
{
	public:
		//! Constructor
		CommandPing() :
			CommandBase(commandOpCodePing)
			{ }

		//! See base class for method description
		bool execute(CommandBase* p_parentCommand);
        errorCode_t importFromCefCommand(void* p_cefCommand);
        errorCode_t exportToCefCommand(void* p_cefCommand);

		class CommandPingRequest
		{
			public:
				//! Constructor.  Set all member values to an initial value to avoid errors and aid debug
				CommandPingRequest() :
					m_testValue(0),
					m_offsetToAddToResponse(0x1122334455667788),
					m_uint8Value(0),
					m_uint16Value(0),
					m_uint32Value(0),
					m_uint64Value(0)
					{ }

				uint32_t 	m_testValue;				//!< used for debugging; not tested nor used
				uint64_t 	m_offsetToAddToResponse;	//!< offset value to add to each response field

				/**
				 * The member values below are compared to the expected request values defined in cefContract.hpp
				 * If the values do not pass, then the ping command returns an error code
				 */
				uint8_t		m_uint8Value;		//!< uint8_t value to compare to expected value
				uint16_t	m_uint16Value;		//!< uint16_t value to compare to expected value
				uint32_t	m_uint32Value;		//!< uint32_t value to compare to expected value
				uint64_t	m_uint64Value;		//!< uint64_t value to compare to expected value
		};
		CommandPingRequest m_request;

		class CommandPingResponse
		{
			public:
			//! Constructor.  Set all member values to an initial value to avoid errors and aid debug
				CommandPingResponse() :
					m_testValue(0),
					m_uint8Value(0),
					m_uint16Value(0),
					m_uint32Value(0),
					m_uint64Value(0)
					{ }

				uint32_t 	m_testValue;		//!< return value used for debugging; not tested nor used

				/**
				 * The member values below are generated by adding m_offsetToAddToResponse
				 * to the corresponding request value in order to return a different value than request, but
				 * still be tied into the request field information as an additional data integrity check.
				 */
				uint8_t		m_uint8Value;		//!< uint8_t value to compare to expected value
				uint16_t	m_uint16Value;		//!< uint16_t value to compare to expected value
				uint32_t	m_uint32Value;		//!< uint32_t value to compare to expected value
				uint64_t	m_uint64Value;		//!< uint64_t value to compare to expected value
		};
		CommandPingResponse m_response;

	private:

        // Command states
        enum
        {
            commandStateCheckRequest = commandStateFirstDerivedState,
			commandStateGenerateResponse,
        };

};

#endif  // end header guard
